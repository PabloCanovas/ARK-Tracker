library(shinydashboard)
library(tidyverse)
library(lubridate)
library(glue)
library(magrittr)
library(DT)
library(shiny)

options(dplyr.summarise.inform=F)

source("Tools.R")

# shiny::runApp(display.mode="showcase")

ui <- dashboardPage(
  dashboardHeader(title = "Basic dashboard"),
  ## Sidebar content
  dashboardSidebar(
    sidebarMenu(
      menuItem("Altas/Bajas", tabName = "altas", icon = icon("dashboard")),
      menuItem("Widgets", tabName = "widgets", icon = icon("th"))
    )
  ),
  dashboardBody(
    tabItems(
      # First tab content
      tabItem(tabName = "altas",
              fluidRow(
                box(
                  offset = 5,
                  width = 3,
                  title = "Fund",
                  status = "warning", solidHeader = F,
                  
                  selectInput(inputId = "fund", multiple = F, label = NULL, selectize = T,
                              choices = list("ALL", "ARKF"), selected = "ALL")
                ),
                box(
                  offset = 5,
                  width = 3,
                  title = "Days back",
                  status = "warning", solidHeader = F,
                  
                  selectInput(inputId = "days_back", multiple = F, label = NULL, selectize = T,
                              choices = list("1D" = 1, "7D" = 7, "30D" = 30), selected = "1D")
                )
              ),
              fluidRow(
                box(title = "ALTAS", status = "success", solidHeader = TRUE,
                    dataTableOutput(outputId = "altas")
                )
              ),
              fluidRow(
                box(title = "BAJAS", status = "danger", solidHeader = TRUE,
                    dataTableOutput(outputId = "bajas")
                )
              ),
      ),
      
      # Second tab content
      tabItem(tabName = "widgets",
              h2("Widgets tab content")
      )
    )
  )
)

get_previous_date <- function(today, days_back) {
  today %>%
    add_with_rollback(days(-days_back)) %>%
    Get_last_trading_day()
}


server <- function(input, output) {
  
  
  
  # funds <- c("ARKK", "ARKQ", "ARKW","ARKG","ARKF")
  # funds <- c("ARKF")
  
  today <- today() %>% Get_last_trading_day()  
  today <- today %>% add(days(1))                  # Los primeros archivos que tengo est√°n con fecha de descarga, no del dia
  # previous_day <- today %>% add(days(-1)) %>% Get_last_trading_day()
  
  
  
  # get_message <- eventReactive(input$go, {
  #   
  #   calc <- do_math()
  #   
  #   significance <- 1-calc$p_value
  #   
  #   if(significance >= calc$confidence_level){
  #     message <- paste0("You can be ", floor(significance*100), 
  #                       "% confident that the difference between conversion rates
  #                       is due to changes you made")
  #     significative <- T
  #   } else {
  #     message <- paste0("You cannot be confident that this result is not due to randomness")
  #     significative <- F
  #   }
  #   
  #   return(list(message = message, significance = significance, significative = significative))
  # }, ignoreNULL = F)
  
  # previous_day <- observeEvent(input$days_back,
  #            {today %>%
  #                # add_with_rollback(days(-input$days_back)) %>%
  #                add(days(-input$days_back)) %>%
  #                Get_last_trading_day()
  #            }
  # )
  
  
  # get_previous_day <- function(){
  #   previous_day <- today %>%
  #   add_with_rollback(days(-input$days_back)) %>%
  #   Get_last_trading_day()
  # }
  # 
  # 
  # 
  # 
  # previous_day <-  eventReactive(input$days_back, get_previous_day())
  
  previous_day <- reactive(get_previous_date(today, as.numeric(input$days_back)))
  
  # a <- renderPrint({get_previous_day()})
  
  # browser()
  
  # sliderMonth <- reactiveValues()
  # observe({
  #   full.date <- as.POSIXct(input$slider1, tz="GMT")
  #   sliderMonth$Month <- as.character(monthStart(full.date))
  # })
  
  
  output$altas <- renderDataTable(
    Get_altas_bajas(today, previous_day(), "all") %>%
      pluck("altas") %>%
      {if(tolower(input$fund) != "all") filter(., fund == input$fund) else .}
  )
  
  # output$bajas <- renderDataTable(
  #   Get_altas_bajas(today, previous_day(), "all") %>%
  #     pluck("bajas") %>%
  #     {if(tolower(input$fund) != "all") filter(., fund == input$fund) else .}
  # )
  
  
  
  # observeEvent(input$fund, 
  #              
  #              if(tolower(input$fund) == "all"){
  #                output$altas <- renderDataTable(
  #                  Get_altas_bajas(today, previous_day, "all") %>% pluck("altas") 
  #                )
  #              } else {
  #                
  #                output$altas <- renderDataTable(
  #                  Get_altas_bajas(today, previous_day, "all") %>%
  #                    pluck("altas") %>%
  #                    filter(fund == input$fund)
  #                )
  #              }
  #              
  # )
  
  
  # df <- read_csv("ARK_funds.csv") %>%
  #   select(-cusip) %>%
  #   group_by(date, company, ticker) %>%
  #   summarise(shares = sum(shares),
  #             market_value = sum(market_value)) %>%
  #   mutate(date = mdy(date))
  # 
  # 
  # output$table1 <- renderDataTable(df)
  
  
  # write_csv(today_state, "ARK_funds.csv")
  # 
  
  
  # DT::datatable(penguins, options = list(
  #   pageLength = 25, 
  #   height = "600px"
  # ))
  
  
  # output$plot1 <- renderPlot({
  #   data <- histdata[seq_len(input$slider)]
  #   hist(data)
  # })
}

shinyApp(ui, server)